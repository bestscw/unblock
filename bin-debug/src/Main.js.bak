/**
 * Copyright (c) 2014,Egret-Labs.org
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Egret-Labs.org nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY EGRET-LABS.ORG AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EGRET-LABS.ORG AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Main = (function (_super) {
    __extends(Main, _super);
    function Main() {
        _super.call(this);
        this._preMoveX = 0;
        this._preMoveY = 0;
        this._time = 0;
        Main.instance = this;
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
    }
    Main.prototype.onAddToStage = function (event) {
        //设置加载进度界面
        this.loadingView = new LoadingUI();
        this.stage.addChild(this.loadingView);
        //初始化Resource资源加载库
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        RES.loadConfig("resource/resource.json", "resource/");
    };
    /**
     * 配置文件加载完成,开始预加载preload资源组。
     */
    Main.prototype.onConfigComplete = function (event) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);
        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);
        RES.loadGroup("preload");
    };
    /**
     * preload资源组加载完成
     */
    Main.prototype.onResourceLoadComplete = function (event) {
        if (event.groupName == "preload") {
            this.stage.removeChild(this.loadingView);
            RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);
            RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);
            this.createGameScene();
        }
    };
    /**
     * preload资源组加载进度
     */
    Main.prototype.onResourceProgress = function (event) {
        if (event.groupName == "preload") {
            this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal);
        }
    };
    /**
     * 创建游戏场景
     */
    Main.prototype.createGameScene = function () {
        egret.Profiler.getInstance().run();
        egret.Ticker.getInstance().register(this.onEnterFrame, this);
        this.initWood();
        /**
         var bg:egret.Bitmap = new egret.Bitmap(RES.getRes("bg"));
         bg.width = CONST.stageWidth;
         bg.height = CONST.stageHeight;
         this.addChild(bg);

         this.hero = <Hero>ObjectPool.getInstance().createObject(Hero);
         this.addChild(this.hero.view);
         **/
        /**
         this.stage.touchChildren = false;
         this.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
         this.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
         this.stage.addEventListener(egret.Event.LEAVE_STAGE, this.onTouchEnd, this);
         this.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
         **/
    };
    Main.prototype.initWood = function () {
        var info = RES.getRes('coordinate');
        for (var i = 0; i < info.length; i++) {
            var style = info[i]._style;
            var x = info[i]._titleX;
            var y = info[i]._titleY;
            var direcion = info[i]._direction;
            var width = info[i]._width;
            var height = info[i]._height;
            var wood = ObjectPool.getInstance().createObject(Wood);
            wood.style = style;
            wood._width = width;
            wood._height = height;
            wood.view.x = x;
            wood.view.y = y;
            wood.direction = direcion;
            wood.view.name = wood.style + "_" + wood.direction + "_" + width + "_" + height;
            wood.view.width = width;
            wood.view.height = height;
            wood.setView();
            console.log('direction:' + direcion + ",x:" + x + ",y:" + y + ",width:" + width + ",height:" + height);
            wood.view.touchEnabled = true;
            wood.view.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this, false, 1);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.addChild(wood.view);
        }
    };
    Main.prototype.onTouchTap = function (event) {
        this._isTouching = true;
        console.log("touchap:" + event.target.x);
    };
    Main.prototype.onTouchBegin = function (event) {
        this._isTouching = true;
        this._preMoveX = event.stageX;
        this._preMoveY = event.stageY;
        console.log(event.stageX + "______" + event.stageY + ",x" + event.target.name);
    };
    Main.prototype.onTouchEnd = function (event) {
        this._isTouching = false;
    };
    Main.prototype.onTouchMove = function (event) {
        if (this._isTouching) {
            console.log('move...');
            event.target.x;
            var x1 = event.target.x;
            console.log('touch x:' + x1);
            var x2 = event.target.x + event.target.width;
            var y1 = event.target.y;
            var y2 = event.target.y + event.target.height;
            console.log(event.target.name);
            var name = event.target.name;
            var str = name.split('_');
            var style = parseInt(str[0]);
            var direction = parseInt(str[1]);
            // 水平移动
            if (direction == 0) {
                var move = event.stageX - this._preMoveX;
                if (move > 0) {
                    // 向右移动
                    var number = this.moveRight(x1, x2, y1, y2);
                    console.log('move right,number:' + number);
                    number = Math.min(number, 80);
                    if (number > 0) {
                        event.target.x += number;
                        event.target.y += 0;
                        console.log('xxxxxxxxx:' + event.target.x);
                    }
                }
                else {
                    // 向左移动
                    var number = this.moveLeft(x1, x2, y1, y2);
                    console.log('move left,number:' + number);
                    number = Math.min(number, 80);
                    if (number > 0) {
                        if (event.target.x <= 0) {
                            return;
                        }
                        event.target.x -= number;
                        event.target.y += 0;
                    }
                }
            }
            else if (direction == 1) {
                // 垂直移动
                var move = event.stageY - this._preMoveY;
                // 向上移动
                if (move < 0) {
                    var number = this.moveTop(x1, x2, y1, y2);
                    console.log('move top,number:' + number);
                    number = Math.max(number, -80);
                    if (number < 0) {
                        event.target.x += 0;
                        event.target.y += number;
                    }
                }
                else {
                    var number = this.moveBottom(x1, x2, y1, y2);
                    console.log('move bottom,number:' + number);
                    number = Math.min(number, 80);
                    if (number > 0) {
                        event.target.x += 0;
                        event.target.y += number;
                    }
                }
            }
        }
        this._preMoveX = event.stageX;
        this._preMoveY = event.stageY;
    };
    Main.prototype.moveLeft = function (x1, x2, y1, y2) {
        var max = 0;
        var woods = [];
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);
        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _x2 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1 + woods[i].view.height;
            if (x1 == _x1 && y1 == _y1)
                continue;
            if (y1 >= _y1 && y2 <= _y2) {
                console.log('_x1:'+_x1+',_x2:' + _x2 + ",_y1:"+ _y1+",_y2:"+_y2+",x1:"+x1+",x2:"+x2+",y1:"+y1+",y2:"+y2);
                if (_x2 <= x1) {
                    if (_x2 > max) {
                        max = _x2;
                    }
                }
            }
        }
        console.log("leftmax:" + max + ",x2" + x2);
        if (max >= 0) {
            if ((x2 - max) > 0) {
                return x2 - max;
            }
        }
        return 0;
    };
    Main.prototype.moveRight = function (x1, x2, y1, y2) {
        console.log('move right');
        var woods = [];
        var max = this.stage.stageWidth;
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);
        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _y1 = woods[i].view.y;
            var _y2 = _y1 + woods[i].view.height;
            if (x1 == _x1 && y1 == _y1)
                continue;
            if (y1 >= _y1 && y2 <= _y2) {
                if (_x1 >= x2) {
                    if (_x1 < max) {
                        max = _x1;
                    }
                }
            }
        }
        console.log("max:" + max + ",x1" + x1);
        if (max - x2 >= 0) {
            return max - x2;
            var offset = max - x1;
            var end = x2 + offset;
            if (end <= this.stage.stageWidth) {
                return max - x1;
            }
            else {
                return 0;
            }
        }
        /**
         if(max != 10000)
         {
             if(max-x1 > 0)
             {

                 return max-x1;
                 //event.target.moveXY(max-x1, 0);
             }
         }

         **/
        return 0;
    };
    Main.prototype.moveTop = function (x1, x2, y1, y2) {
        var woods = [];
        var max = 0;
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);
        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _x2 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1 + woods[i].view.height;
            if (x1 == _x1 && y1 == _y1)
                continue;
            if (x1 >= _x1 && x2 <= _x2) {
                if (_y2 <= y1) {
                    console.log('_x1:' + _x1 + ",_x2:" + _x2 + ",_y1:" + _y1);
                    if (_y2 > max) {
                        max = _y2;
                    }
                }
            }
        }
        console.log('movetop:max:' + max + ",y1:" + y1);
        if (max >= 0) {
            if (max - y1 < 0) {
                return max - y1;
            }
        }
        return 0;
    };
    Main.prototype.moveBottom = function (x1, x2, y1, y2) {
        var max = this.stage.stageHeight;
        var woods = [];
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);
        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _x2 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1 + woods[i].view.height;
            if (x1 == _x1 && y1 == _y1)
                continue;
            if (x1 >= _x1 && x2 <= _x2) {
                console.log('_x1:' + _x1 + ",_x2:" + _x2 + ",_y1:" + _y1);
                if (_y1 >= y2) {
                    if (_y1 < max) {
                        max = _y1;
                    }
                }
            }
        }
        console.log('movebottom222222:max:' + max + ",y2:" + y2);
        if (max - y2 > 0) {
            return max - y2;
        }
        return 0;
    };
    Main.prototype.onEnterFrame = function (advancedTime) {
        /**
         this._time += advancedTime;
         //创建敌人
         if(this._time > CONST.enemyGap){
            this._time = 0;
            var enemy = ObjectPool.getInstance().createObject(Enemy);
            enemy.view.x = Math.random() * (CONST.stageWidth - 80);
            this.addChild(enemy.view);
        }
         **/
    };
    return Main;
})(egret.DisplayObjectContainer);
