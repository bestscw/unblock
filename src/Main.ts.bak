/**
 * Copyright (c) 2014,Egret-Labs.org
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Egret-Labs.org nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY EGRET-LABS.ORG AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EGRET-LABS.ORG AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

class Main extends egret.DisplayObjectContainer{

    /**
     * 加载进度界面
     */
    private loadingView:LoadingUI;

    public static instance:Main;

    public constructor() {
        super();
        Main.instance = this;
        this.addEventListener(egret.Event.ADDED_TO_STAGE,this.onAddToStage,this);
    }

    private onAddToStage(event:egret.Event){
        //设置加载进度界面
        this.loadingView  = new LoadingUI();
        this.stage.addChild(this.loadingView);

        //初始化Resource资源加载库
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE,this.onConfigComplete,this);
        RES.loadConfig("resource/resource.json","resource/");
    }
    /**
     * 配置文件加载完成,开始预加载preload资源组。
     */
    private onConfigComplete(event:RES.ResourceEvent):void{
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE,this.onConfigComplete,this);
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE,this.onResourceLoadComplete,this);
        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS,this.onResourceProgress,this);
        RES.loadGroup("preload");
    }
    /**
     * preload资源组加载完成
     */
    private onResourceLoadComplete(event:RES.ResourceEvent):void {
        if(event.groupName=="preload"){
            this.stage.removeChild(this.loadingView);
            RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE,this.onResourceLoadComplete,this);
            RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS,this.onResourceProgress,this);
            this.createGameScene();
        }
    }
    /**
     * preload资源组加载进度
     */
    private onResourceProgress(event:RES.ResourceEvent):void {
        if(event.groupName=="preload"){
            this.loadingView.setProgress(event.itemsLoaded,event.itemsTotal);
        }
    }

    private hero:Hero;

    /**
     * 创建游戏场景
     */
    private createGameScene():void{
        egret.Profiler.getInstance().run();
        egret.Ticker.getInstance().register(this.onEnterFrame, this);


        this.initWood();
        /**
        var bg:egret.Bitmap = new egret.Bitmap(RES.getRes("bg"));
        bg.width = CONST.stageWidth;
        bg.height = CONST.stageHeight;
        this.addChild(bg);

        this.hero = <Hero>ObjectPool.getInstance().createObject(Hero);
        this.addChild(this.hero.view);
         **/

        /**
        this.stage.touchChildren = false;
        this.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
        this.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        this.stage.addEventListener(egret.Event.LEAVE_STAGE, this.onTouchEnd, this);
        this.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
         **/
    }

    private initWood()
    {
        var info:any = RES.getRes('coordinate');

        for (var i = 0; i < info.length; i++) {
            var style:number = info[i]._style;
            var x:number = info[i]._titleX;
            var y:number = info[i]._titleY;
            var direcion:number = info[i]._direction;
            var width:number = info[i]._width;
            var height:number = info[i]._height;

            var wood:Wood = <Wood>ObjectPool.getInstance().createObject(Wood);
            wood.style = style;
            wood._width = width;
            wood._height = height;
            wood.view.x = x;
            wood.view.y = y;
            wood.direction = direcion;
            wood.view.name = wood.style+"_"+wood.direction+"_"+width+"_"+height;
            wood.view.width = width;
            wood.view.height = height;
            wood.setView();

            console.log('direction:'+direcion+",x:"+x+",y:"+y+",width:"+width+",height:"+height);

            wood.view.touchEnabled = true;
            wood.view.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this,false,1);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            wood.view.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.addChild(wood.view);
        }
    }

    private _isTouching:boolean;

    private onTouchTap(event:egret.TouchEvent):void {

        this._isTouching = true;
        console.log("touchap:"+event.target.x);
    }

    private onTouchBegin(event:egret.TouchEvent):void {

        this._isTouching = true;
        this._preMoveX = event.stageX;
        this._preMoveY = event.stageY;

        console.log(event.stageX+"______"+event.stageY+",x"+event.target.name);
    }

    private onTouchEnd(event:egret.TouchEvent):void {
        this._isTouching = false;
    }

    private _preMoveX:number = 0;
    private _preMoveY:number = 0;
    private onTouchMove(event:egret.TouchEvent):void {
        if(this._isTouching) {

            console.log('move...');
            event.target.x
            var x1:number = event.target.x;

            console.log('touch x:'+x1);
            var x2:number = event.target.x+event.target.width;

            var y1:number = event.target.y;
            var y2:number = event.target.y+event.target.height;



            console.log(event.target.name);
            var name:string = event.target.name;
            var str:string[] =  name.split('_');
            var style:number = parseInt(str[0]);
            var direction:number = parseInt(str[1]);

            // 水平移动
            if(direction == 0)
            {
                var move:number = event.stageX - this._preMoveX;

                if(move > 0)
                {
                    // 向右移动
                    var number:number = this.moveRight(x1,x2,y1,y2);
                    console.log('move right,number:'+number)
                    if(number > 0)
                    {
                        event.target.x += number;
                        event.target.y += 0;
                        console.log('xxxxxxxxx:'+event.target.x);



                        // event.target.moveXY(number, 0);
                    }
                }
                else
                {
                    // 向左移动
                    var number:number = this.moveLeft(x1,x2,y1,y2);
                    console.log('move left,number:'+number)

                    if(number < 0)
                    {
                        event.target.x += number;
                        event.target.y += 0;
                        //event.target.moveXY(number, 0);
                    }
                }

            }
            else if(direction == 1)
            {

                // 垂直移动
                var move:number = event.stageY - this._preMoveY;

                // 向上移动
                if(move < 0)
                {
                    var number:number = this.moveTop(x1,x2,y1,y2);
                    console.log('move top,number:'+number)

                    if(number < 0)
                    {
                        event.target.x += 0;
                        event.target.y += number;
                        //event.target.moveXY(0, number);
                    }

                } // 向下移动
                else
                {
                    var number:number = this.moveBottom(x1,x2,y1,y2);
                    console.log('move bottom,number:'+number)

                    if(number > 0)
                    {
                        event.target.x += 0;
                        event.target.y += number;
                        //event.target.moveXY(0, number);
                    }

                }
            }
        }
        this._preMoveX = event.stageX;
        this._preMoveY = event.stageY;
    }

    private moveLeft(x1,x2,y1,y2)
    {
        var max:number = 0;
        var woods:Array<any> = [];
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);

        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1+ woods[i].view.height;

            if(x1 == _x1 && y1 == _y1) continue;


            if(y1 >= _y1 && y2 <= _y2)
            {
                if(_x1 < x1)
                {
                    if(_x1 > max)
                    {
                        max = _x1;
                    }
                }
            }
        }

        if(max >= 0)
        {
            if(max - x1 < 0)
            {
                return max - x1;
            }
        }

        return 0;
    }

    private moveRight(x1,x2,y1,y2)
    {
        console.log('move right');
        var woods:Array<any> = [];
        var max:number = this.stage.stageWidth;
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);

        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _y1 = woods[i].view.y;
            var _y2 = _y1+ woods[i].view.height;

            if(x1 == _x1 && y1 == _y1) continue;

            if(y1 >= _y1 && y2 <= _y2)
            {
                if(_x1 > x2)
                {
                    if(_x1 < max)
                    {
                        max = _x1;
                    }
                }
            }
        }

        console.log("max:"+max+",x1"+x1);

        if(max-x2 >= 0)
        {

            return max-x2;
            var offset:number = max-x1;
            var end:number = x2+offset;
            if(end <= this.stage.stageWidth)
            {
                return max-x1;
            }
            else
            {
                return 0;
            }
            //event.target.moveXY(max-x1, 0);
        }
        /**
        if(max != 10000)
        {
            if(max-x1 > 0)
            {

                return max-x1;
                //event.target.moveXY(max-x1, 0);
            }
        }

         **/

        return 0;
    }

    private moveTop(x1,x2,y1,y2)
    {
        var woods:Array<any> = [];
        var max:number = 0;
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);

        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _x2 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1+ woods[i].view.height;

            if(x1 == _x1 && y1 == _y1) continue;

            if(x1 >= _x1 && x2 <= _x2)
            {
                if(_y2 < y1)
                {
                    console.log('_x1:'+_x1+",_x2:"+_x2+",_y1:"+_y1);
                    if(_y2 > max)
                    {
                        max = _y2;
                    }
                }
            }
        }

        console.log('movetop:max:'+max+",y1:"+y1);

        if(max >= 0)
        {
            if(max-y1 < 0)
            {
                return max - y1;
            }
        }

        return 0;
    }

    private moveBottom(x1,x2,y1,y2)
    {
        var max:number = this.stage.stageHeight;
        var woods:Array<any> = [];
        woods = ObjectPool.getInstance().getObjectsByKey(Wood.key);

        for (var i = 0; i < woods.length; i++) {
            var _x1 = woods[i].view.x;
            var _x2 = woods[i].view.x + woods[i].view.width;
            var _y1 = woods[i].view.y;
            var _y2 = _y1+ woods[i].view.height;

            if(x1 == _x1 && y1 == _y1) continue;

            if(x1 >= _x1 && x2 <= _x2)
            {
                if(_y1 > y2)
                {
                    if(_y1 < max)
                    {
                        max = _y1;
                    }
                }
            }
        }

        console.log('movebottom222222:max:'+max+",y1:"+y1);

        if(max - y2 > 0)
        {
            return max-y2;
        }


        return 0;
    }

    private _time:number = 0;
    public onEnterFrame(advancedTime:number):void {
        /**
        this._time += advancedTime;
        //创建敌人
        if(this._time > CONST.enemyGap){
            this._time = 0;
            var enemy = ObjectPool.getInstance().createObject(Enemy);
            enemy.view.x = Math.random() * (CONST.stageWidth - 80);
            this.addChild(enemy.view);
        }
         **/
    }
}


